@function pow($number, $exp) {
  $return: 1;

  @if $exp > 0 {
    // If the exponent is positive then multiply it
    @for $i from 1 through $exp {
      $return: $return * $number;
    }
  }
  @else if $exp < 0 {
    // If the number is 0 or negative then divide it
    @for $i from 1 through -$exp {
      $return: $return / $number;
    }
  }

  @return $return;
}

@function modular-scale($number, $base: $type-scale-base) {
  @return pow($type-scale, $number) * $base;
}

@function strip-unit($number) {
  @return $number / ($number * 0 + 1);
}

@function to-rem($value, $base: 16px) {
  @if (unit($value) == 'em') {
    $value: strip-unit($value) * 1rem;
  }

  @if (unit($value) != 'rem') {
    $value: strip-unit($value) / strip-unit($base) * 1rem;
  }

  @if (strip-unit($value) == 0) {
    $value: 0;
  }

  @return $value;
}

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// Usage example:
//
// .icon {
//   background-image: url(get-icon('radio', #fff));
// }
@function get-icon($icon, $color: $icon-color) {
  $color: inspect($color);

  @if (str-index($color, '#') != null) {
    @if map-has-key($icons, $icon) {
      @return str-replace(str-replace(map-get($icons, $icon), inspect($icon-color), $color), '#', '%23');
    }

    @error "Please make sure '#{$icon}' is defined in the $icons map.";
  }

  @error "Please make sure '#{$color}' is a HEX value.";
}

// Fluid types
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
  @each $property in $properties {
    #{$property}: $min-value;
  }

  @media screen and (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
    }
  }

  @media screen and (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}